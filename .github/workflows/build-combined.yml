name: Combined Tracy Build
'on':
  push:
    tags:
    - v*
permissions:
  contents: write
jobs:
  tracy-build:
    strategy:
      matrix:
        os:
        - windows-latest
        - macos-15
        build_flags:
        - cmake: -DTRACY_LTO=ON
          meson: ''
          postfix: -lto
        - cmake: -DTRACY_ON_DEMAND=ON -DTRACY_LTO=ON
          meson: -Dtracy:on_demand=true
          postfix: -ondemand-lto
    runs-on: ${{ matrix.os }}
    continue-on-error: true
    steps:
    - uses: actions/checkout@v4
      with:
        repository: wolfpld/tracy
        ref: ${{ github.event.inputs.tracy_tag || 'v0.12.2' }}
    - if: startsWith(matrix.os, 'windows')
      uses: microsoft/setup-msbuild@v2
    - if: startsWith(matrix.os, 'windows')
      uses: actions/setup-python@v2
      with:
        python-version: 3.x
    - if: startsWith(matrix.os, 'windows')
      run: pip install meson ninja
    - if: startsWith(matrix.os, 'macos')
      name: Install macos dependencies
      run: brew install pkg-config glfw meson
    - name: Trust git repo
      run: git config --global --add safe.directory '*'
    - name: Profiler GUI
      run: |
        cmake -B profiler/build -S profiler ${{ matrix.build_flags.cmake }} -DCMAKE_BUILD_TYPE=Release -DGIT_REV="v0.12.2"
        cmake --build profiler/build --parallel --config Release
    - name: Update utility
      run: |
        cmake -B update/build -S update ${{ matrix.build_flags.cmake }} -DCMAKE_BUILD_TYPE=Release
        cmake --build update/build --parallel --config Release
    - name: Capture utility
      run: |
        cmake -B capture/build -S capture ${{ matrix.build_flags.cmake }} -DCMAKE_BUILD_TYPE=Release
        cmake --build capture/build --parallel --config Release
    - name: Csvexport utility
      run: |
        cmake -B csvexport/build -S csvexport ${{ matrix.build_flags.cmake }} -DCMAKE_BUILD_TYPE=Release
        cmake --build csvexport/build --parallel --config Release
    - name: Import utilities
      run: |
        cmake -B import/build -S import ${{ matrix.build_flags.cmake }} -DCMAKE_BUILD_TYPE=Release
        cmake --build import/build --parallel --config Release
    - if: ${{ !startsWith(matrix.os, 'windows') }}
      name: Library
      run: meson setup ${{ matrix.build_flags.meson }} -Dprefix=$GITHUB_WORKSPACE/bin/lib
        build && meson compile -C build && meson install -C build
    - if: ${{ !startsWith(matrix.os, 'windows') }}
      name: Find Artifacts
      id: find_artifacts
      run: |
        mkdir -p bin
        cp profiler/build/tracy-profiler bin
        cp update/build/tracy-update bin
        cp capture/build/tracy-capture bin
        cp csvexport/build/tracy-csvexport bin
        cp import/build/tracy-import-chrome bin
        cp import/build/tracy-import-fuchsia bin
    - if: startsWith(matrix.os, 'windows')
      name: Find Artifacts
      id: find_artifacts_windows
      run: |
        mkdir bin
        copy profiler\build\Release\tracy-profiler.exe bin
        copy update\build\Release\tracy-update.exe bin
        copy capture\build\Release\tracy-capture.exe bin
        copy csvexport\build\Release\tracy-csvexport.exe bin
        copy import\build\Release\tracy-import-chrome.exe bin
        copy import\build\Release\tracy-import-fuchsia.exe bin
    - uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.os }}${{ matrix.build_flags.postfix }}
        path: bin
    env:
      CPM_SOURCE_CACHE: ${{ github.workspace }}/cpm-cache
  tracy-linux-build:
    runs-on: ubuntu-latest
    container: archlinux:base-devel
    steps:
    - name: Install dependencies
      run: pacman -Syu --noconfirm && pacman -S --noconfirm --needed freetype2 debuginfod
        wayland dbus libxkbcommon libglvnd meson cmake glfw git wayland-protocols
        nodejs
    - name: Trust git repo
      run: git config --global --add safe.directory '*'
    - uses: actions/checkout@v4
      with:
        repository: wolfpld/tracy
        ref: ${{ github.event.inputs.tracy_tag || 'v0.12.2' }}
    - name: Profiler GUI
      run: |
        cmake -B profiler/build -S profiler ${{ matrix.build_flags.cmake }} -DCMAKE_BUILD_TYPE=Release -DGIT_REV="v0.12.2"
        cmake --build profiler/build --parallel
    - name: Update utility
      run: |
        cmake -B update/build -S update ${{ matrix.build_flags.cmake }} -DCMAKE_BUILD_TYPE=Release
        cmake --build update/build --parallel
    - name: Capture utility
      run: |
        cmake -B capture/build -S capture ${{ matrix.build_flags.cmake }} -DCMAKE_BUILD_TYPE=Release
        cmake --build capture/build --parallel
    - name: Csvexport utility
      run: |
        cmake -B csvexport/build -S csvexport ${{ matrix.build_flags.cmake }} -DCMAKE_BUILD_TYPE=Release
        cmake --build csvexport/build --parallel
    - name: Import utilities
      run: |
        cmake -B import/build -S import ${{ matrix.build_flags.cmake }} -DCMAKE_BUILD_TYPE=Release
        cmake --build import/build --parallel
    - name: Library
      run: meson setup ${{ matrix.build_flags.meson }} -Dprefix=$GITHUB_WORKSPACE/bin/lib
        build && meson compile -C build && meson install -C build
    - name: Find Artifacts
      id: find_artifacts
      run: |
        mkdir -p bin
        cp profiler/build/tracy-profiler bin
        cp update/build/tracy-update bin
        cp capture/build/tracy-capture bin
        cp csvexport/build/tracy-csvexport bin
        cp import/build/tracy-import-chrome bin
        cp import/build/tracy-import-fuchsia bin
        strip bin/tracy-*
    - uses: actions/upload-artifact@v4
      with:
        name: arch-linux${{ matrix.build_flags.postfix }}
        path: bin
    strategy:
      matrix:
        build_flags:
        - cmake: -DTRACY_LTO=ON
          meson: ''
          postfix: -lto
        - cmake: -DTRACY_ON_DEMAND=ON -DTRACY_LTO=ON
          meson: -Dtracy:on_demand=true
          postfix: -ondemand-lto
        - cmake: -DLEGACY=ON -DTRACY_LTO=ON
          meson: ''
          postfix: -x11-lto
    env:
      CPM_SOURCE_CACHE: ${{ github.workspace }}/cpm-cache
  create-release:
    needs:
    - tracy-build
    - tracy-linux-build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
    - name: List downloaded artifacts
      run: ls -R artifacts/
    - name: Package all artifacts
      run: |-
        cd artifacts
        for dir in */; do
          dirname="${dir%/}"
          echo "Processing: $dirname"

          case "$dirname" in
            windows-*)
              (cd "$dirname" && zip -r "../../tracy-${dirname}.zip" ./* )
              echo "Created tracy-${dirname}.zip"
              ;;
            *)
              tar czf "../tracy-${dirname}.tar.gz" "$dirname"
              echo "Created tracy-${dirname}.tar.gz"
              ;;
          esac
        done
        cd ..
    - name: List created packages
      run: ls -lh *.zip *.tar.gz 2>/dev/null || echo "No packages created"
    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        name: Tracy ${{ github.ref_name }}
        target_commitish: ${{ github.sha }}
        body: Prebuilt Tracy binaries for ${{ github.ref_name }} from https://github.com/wolfpld/tracy
        files: |-
          *.zip
          *.tar.gz
        fail_on_unmatched_files: true
        overwrite: true
